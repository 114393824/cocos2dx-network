// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coremessage.proto

#ifndef PROTOBUF_coremessage_2eproto__INCLUDED
#define PROTOBUF_coremessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_coremessage_2eproto();
void protobuf_AssignDesc_coremessage_2eproto();
void protobuf_ShutdownFile_coremessage_2eproto();

class MessageHead;

enum ModuleID {
  MODULE_LOGIN = 0,
  MODULE_ROLE = 1,
  MODULE_END = 2
};
bool ModuleID_IsValid(int value);
const ModuleID ModuleID_MIN = MODULE_LOGIN;
const ModuleID ModuleID_MAX = MODULE_END;
const int ModuleID_ARRAYSIZE = ModuleID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModuleID_descriptor();
inline const ::std::string& ModuleID_Name(ModuleID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModuleID_descriptor(), value);
}
inline bool ModuleID_Parse(
    const ::std::string& name, ModuleID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModuleID>(
    ModuleID_descriptor(), name, value);
}
// ===================================================================

class MessageHead : public ::google::protobuf::Message {
 public:
  MessageHead();
  virtual ~MessageHead();

  MessageHead(const MessageHead& from);

  inline MessageHead& operator=(const MessageHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHead& default_instance();

  void Swap(MessageHead* other);

  // implements Message ----------------------------------------------

  MessageHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageHead& from);
  void MergeFrom(const MessageHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 msgno = 1;
  inline bool has_msgno() const;
  inline void clear_msgno();
  static const int kMsgnoFieldNumber = 1;
  inline ::google::protobuf::int32 msgno() const;
  inline void set_msgno(::google::protobuf::int32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string mac = 3;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 3;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:MessageHead)
 private:
  inline void set_has_msgno();
  inline void clear_has_msgno();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_mac();
  inline void clear_has_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::std::string* mac_;
  ::google::protobuf::int32 msgno_;
  friend void  protobuf_AddDesc_coremessage_2eproto();
  friend void protobuf_AssignDesc_coremessage_2eproto();
  friend void protobuf_ShutdownFile_coremessage_2eproto();

  void InitAsDefaultInstance();
  static MessageHead* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageHead

// optional int32 msgno = 1;
inline bool MessageHead::has_msgno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageHead::set_has_msgno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageHead::clear_has_msgno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageHead::clear_msgno() {
  msgno_ = 0;
  clear_has_msgno();
}
inline ::google::protobuf::int32 MessageHead::msgno() const {
  // @@protoc_insertion_point(field_get:MessageHead.msgno)
  return msgno_;
}
inline void MessageHead::set_msgno(::google::protobuf::int32 value) {
  set_has_msgno();
  msgno_ = value;
  // @@protoc_insertion_point(field_set:MessageHead.msgno)
}

// optional string token = 2;
inline bool MessageHead::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageHead::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageHead::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageHead::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& MessageHead::token() const {
  // @@protoc_insertion_point(field_get:MessageHead.token)
  return *token_;
}
inline void MessageHead::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:MessageHead.token)
}
inline void MessageHead::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageHead.token)
}
inline void MessageHead::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageHead.token)
}
inline ::std::string* MessageHead::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageHead.token)
  return token_;
}
inline ::std::string* MessageHead::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageHead::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageHead.token)
}

// optional string mac = 3;
inline bool MessageHead::has_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageHead::set_has_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageHead::clear_has_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageHead::clear_mac() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& MessageHead::mac() const {
  // @@protoc_insertion_point(field_get:MessageHead.mac)
  return *mac_;
}
inline void MessageHead::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set:MessageHead.mac)
}
inline void MessageHead::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageHead.mac)
}
inline void MessageHead::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageHead.mac)
}
inline ::std::string* MessageHead::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mac_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageHead.mac)
  return mac_;
}
inline ::std::string* MessageHead::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageHead::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageHead.mac)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ModuleID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ModuleID>() {
  return ::ModuleID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_coremessage_2eproto__INCLUDED
