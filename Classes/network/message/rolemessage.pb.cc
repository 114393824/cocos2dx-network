// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rolemessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rolemessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMessageRoleLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleCreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleCreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRoleCreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRoleCreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRolePropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRolePropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageRolePropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageRolePropertyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleOpcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rolemessage_2eproto() {
  protobuf_AddDesc_rolemessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rolemessage.proto");
  GOOGLE_CHECK(file != NULL);
  CMessageRoleLoginRequest_descriptor_ = file->message_type(0);
  static const int CMessageRoleLoginRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginRequest, token_),
  };
  CMessageRoleLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleLoginRequest_descriptor_,
      CMessageRoleLoginRequest::default_instance_,
      CMessageRoleLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleLoginRequest));
  CMessageRoleLoginResponse_descriptor_ = file->message_type(1);
  static const int CMessageRoleLoginResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, physical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, glod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, mission1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, timeleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, addition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, mission2_),
  };
  CMessageRoleLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleLoginResponse_descriptor_,
      CMessageRoleLoginResponse::default_instance_,
      CMessageRoleLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleLoginResponse));
  CMessageRoleCreateRequest_descriptor_ = file->message_type(2);
  static const int CMessageRoleCreateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateRequest, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateRequest, nickname_),
  };
  CMessageRoleCreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleCreateRequest_descriptor_,
      CMessageRoleCreateRequest::default_instance_,
      CMessageRoleCreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleCreateRequest));
  CMessageRoleCreateResponse_descriptor_ = file->message_type(3);
  static const int CMessageRoleCreateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateResponse, result_),
  };
  CMessageRoleCreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRoleCreateResponse_descriptor_,
      CMessageRoleCreateResponse::default_instance_,
      CMessageRoleCreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRoleCreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRoleCreateResponse));
  CMessageRolePropertyRequest_descriptor_ = file->message_type(4);
  static const int CMessageRolePropertyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyRequest, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyRequest, userid_),
  };
  CMessageRolePropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRolePropertyRequest_descriptor_,
      CMessageRolePropertyRequest::default_instance_,
      CMessageRolePropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRolePropertyRequest));
  CMessageRolePropertyResponse_descriptor_ = file->message_type(5);
  static const int CMessageRolePropertyResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, immunity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, agile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, endurance_),
  };
  CMessageRolePropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageRolePropertyResponse_descriptor_,
      CMessageRolePropertyResponse::default_instance_,
      CMessageRolePropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageRolePropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageRolePropertyResponse));
  RoleOpcode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rolemessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleLoginRequest_descriptor_, &CMessageRoleLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleLoginResponse_descriptor_, &CMessageRoleLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleCreateRequest_descriptor_, &CMessageRoleCreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRoleCreateResponse_descriptor_, &CMessageRoleCreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRolePropertyRequest_descriptor_, &CMessageRolePropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageRolePropertyResponse_descriptor_, &CMessageRolePropertyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rolemessage_2eproto() {
  delete CMessageRoleLoginRequest::default_instance_;
  delete CMessageRoleLoginRequest_reflection_;
  delete CMessageRoleLoginResponse::default_instance_;
  delete CMessageRoleLoginResponse_reflection_;
  delete CMessageRoleCreateRequest::default_instance_;
  delete CMessageRoleCreateRequest_reflection_;
  delete CMessageRoleCreateResponse::default_instance_;
  delete CMessageRoleCreateResponse_reflection_;
  delete CMessageRolePropertyRequest::default_instance_;
  delete CMessageRolePropertyRequest_reflection_;
  delete CMessageRolePropertyResponse::default_instance_;
  delete CMessageRolePropertyResponse_reflection_;
}

void protobuf_AddDesc_rolemessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021rolemessage.proto\")\n\030CMessageRoleLogin"
    "Request\022\r\n\005token\030\001 \001(\t\"\202\002\n\031CMessageRoleL"
    "oginResponse\022\016\n\006userid\030\001 \001(\005\022\020\n\010nickname"
    "\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\020\n\010ph"
    "ysical\030\005 \001(\005\022\014\n\004glod\030\006 \001(\005\022\017\n\007diamond\030\007 "
    "\001(\005\022\016\n\006result\030\010 \001(\005\022\014\n\004bits\030\t \001(\005\022\020\n\010mis"
    "sion1\030\n \001(\005\022\020\n\010timeleft\030\013 \001(\005\022\020\n\010interva"
    "l\030\014 \001(\005\022\020\n\010addition\030\r \001(\005\022\020\n\010mission2\030\016 "
    "\001(\005\"L\n\031CMessageRoleCreateRequest\022\r\n\005styl"
    "e\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\020\n\010nickname\030\003 \001("
    "\t\",\n\032CMessageRoleCreateResponse\022\016\n\006resul"
    "t\030\001 \001(\005\"<\n\033CMessageRolePropertyRequest\022\r"
    "\n\005style\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\"\312\001\n\034CMessa"
    "geRolePropertyResponse\022\r\n\005fight\030\001 \001(\005\022\016\n"
    "\006attack\030\002 \001(\005\022\017\n\007defence\030\003 \001(\005\022\n\n\002hp\030\004 \001"
    "(\005\022\r\n\005speed\030\005 \001(\005\022\014\n\004crit\030\006 \001(\005\022\020\n\010immun"
    "ity\030\007 \001(\005\022\r\n\005magic\030\010 \001(\005\022\016\n\006strong\030\t \001(\005"
    "\022\r\n\005agile\030\n \001(\005\022\021\n\tendurance\030\013 \001(\005*\364\001\n\nR"
    "oleOpcode\022\037\n\031ID_C2S_ROLE_LOGIN_REQUEST\020\200"
    "\200\004\022 \n\032ID_S2C_ROLE_LOGIN_RESPONSE\020\201\200\004\022 \n\032"
    "ID_C2S_ROLE_CREATE_REQUEST\020\202\200\004\022!\n\033ID_S2C"
    "_ROLE_CREATE_RESPONSE\020\203\200\004\022\"\n\034ID_C2S_ROLE"
    "_PROPERTY_REQUEST\020\204\200\004\022#\n\035ID_S2C_ROLE_PRO"
    "PERTY_RESPONSE\020\205\200\004\022\025\n\017ROLE_MODULE_END\020\206\200"
    "\004B\002H\001", 965);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rolemessage.proto", &protobuf_RegisterTypes);
  CMessageRoleLoginRequest::default_instance_ = new CMessageRoleLoginRequest();
  CMessageRoleLoginResponse::default_instance_ = new CMessageRoleLoginResponse();
  CMessageRoleCreateRequest::default_instance_ = new CMessageRoleCreateRequest();
  CMessageRoleCreateResponse::default_instance_ = new CMessageRoleCreateResponse();
  CMessageRolePropertyRequest::default_instance_ = new CMessageRolePropertyRequest();
  CMessageRolePropertyResponse::default_instance_ = new CMessageRolePropertyResponse();
  CMessageRoleLoginRequest::default_instance_->InitAsDefaultInstance();
  CMessageRoleLoginResponse::default_instance_->InitAsDefaultInstance();
  CMessageRoleCreateRequest::default_instance_->InitAsDefaultInstance();
  CMessageRoleCreateResponse::default_instance_->InitAsDefaultInstance();
  CMessageRolePropertyRequest::default_instance_->InitAsDefaultInstance();
  CMessageRolePropertyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rolemessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rolemessage_2eproto {
  StaticDescriptorInitializer_rolemessage_2eproto() {
    protobuf_AddDesc_rolemessage_2eproto();
  }
} static_descriptor_initializer_rolemessage_2eproto_;
const ::google::protobuf::EnumDescriptor* RoleOpcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleOpcode_descriptor_;
}
bool RoleOpcode_IsValid(int value) {
  switch(value) {
    case 65536:
    case 65537:
    case 65538:
    case 65539:
    case 65540:
    case 65541:
    case 65542:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleLoginRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

CMessageRoleLoginRequest::CMessageRoleLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRoleLoginRequest)
}

void CMessageRoleLoginRequest::InitAsDefaultInstance() {
}

CMessageRoleLoginRequest::CMessageRoleLoginRequest(const CMessageRoleLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRoleLoginRequest)
}

void CMessageRoleLoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleLoginRequest::~CMessageRoleLoginRequest() {
  // @@protoc_insertion_point(destructor:CMessageRoleLoginRequest)
  SharedDtor();
}

void CMessageRoleLoginRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CMessageRoleLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRoleLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleLoginRequest_descriptor_;
}

const CMessageRoleLoginRequest& CMessageRoleLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRoleLoginRequest* CMessageRoleLoginRequest::default_instance_ = NULL;

CMessageRoleLoginRequest* CMessageRoleLoginRequest::New() const {
  return new CMessageRoleLoginRequest;
}

void CMessageRoleLoginRequest::Clear() {
  if (has_token()) {
    if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRoleLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRoleLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRoleLoginRequest)
  return false;
#undef DO_
}

void CMessageRoleLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRoleLoginRequest)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRoleLoginRequest)
}

::google::protobuf::uint8* CMessageRoleLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRoleLoginRequest)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRoleLoginRequest)
  return target;
}

int CMessageRoleLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRoleLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleLoginRequest::MergeFrom(const CMessageRoleLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleLoginRequest::CopyFrom(const CMessageRoleLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRoleLoginRequest::IsInitialized() const {

  return true;
}

void CMessageRoleLoginRequest::Swap(CMessageRoleLoginRequest* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRoleLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRoleLoginRequest_descriptor_;
  metadata.reflection = CMessageRoleLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleLoginResponse::kUseridFieldNumber;
const int CMessageRoleLoginResponse::kNicknameFieldNumber;
const int CMessageRoleLoginResponse::kLevelFieldNumber;
const int CMessageRoleLoginResponse::kExpFieldNumber;
const int CMessageRoleLoginResponse::kPhysicalFieldNumber;
const int CMessageRoleLoginResponse::kGlodFieldNumber;
const int CMessageRoleLoginResponse::kDiamondFieldNumber;
const int CMessageRoleLoginResponse::kResultFieldNumber;
const int CMessageRoleLoginResponse::kBitsFieldNumber;
const int CMessageRoleLoginResponse::kMission1FieldNumber;
const int CMessageRoleLoginResponse::kTimeleftFieldNumber;
const int CMessageRoleLoginResponse::kIntervalFieldNumber;
const int CMessageRoleLoginResponse::kAdditionFieldNumber;
const int CMessageRoleLoginResponse::kMission2FieldNumber;
#endif  // !_MSC_VER

CMessageRoleLoginResponse::CMessageRoleLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRoleLoginResponse)
}

void CMessageRoleLoginResponse::InitAsDefaultInstance() {
}

CMessageRoleLoginResponse::CMessageRoleLoginResponse(const CMessageRoleLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRoleLoginResponse)
}

void CMessageRoleLoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  exp_ = 0;
  physical_ = 0;
  glod_ = 0;
  diamond_ = 0;
  result_ = 0;
  bits_ = 0;
  mission1_ = 0;
  timeleft_ = 0;
  interval_ = 0;
  addition_ = 0;
  mission2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleLoginResponse::~CMessageRoleLoginResponse() {
  // @@protoc_insertion_point(destructor:CMessageRoleLoginResponse)
  SharedDtor();
}

void CMessageRoleLoginResponse::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CMessageRoleLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRoleLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleLoginResponse_descriptor_;
}

const CMessageRoleLoginResponse& CMessageRoleLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRoleLoginResponse* CMessageRoleLoginResponse::default_instance_ = NULL;

CMessageRoleLoginResponse* CMessageRoleLoginResponse::New() const {
  return new CMessageRoleLoginResponse;
}

void CMessageRoleLoginResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageRoleLoginResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(userid_, result_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(bits_, mission2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRoleLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_physical;
        break;
      }

      // optional int32 physical = 5;
      case 5: {
        if (tag == 40) {
         parse_physical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_)));
          set_has_physical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_glod;
        break;
      }

      // optional int32 glod = 6;
      case 6: {
        if (tag == 48) {
         parse_glod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &glod_)));
          set_has_glod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 7;
      case 7: {
        if (tag == 56) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional int32 result = 8;
      case 8: {
        if (tag == 64) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bits;
        break;
      }

      // optional int32 bits = 9;
      case 9: {
        if (tag == 72) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mission1;
        break;
      }

      // optional int32 mission1 = 10;
      case 10: {
        if (tag == 80) {
         parse_mission1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission1_)));
          set_has_mission1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeleft;
        break;
      }

      // optional int32 timeleft = 11;
      case 11: {
        if (tag == 88) {
         parse_timeleft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeleft_)));
          set_has_timeleft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_interval;
        break;
      }

      // optional int32 interval = 12;
      case 12: {
        if (tag == 96) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_addition;
        break;
      }

      // optional int32 addition = 13;
      case 13: {
        if (tag == 104) {
         parse_addition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addition_)));
          set_has_addition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mission2;
        break;
      }

      // optional int32 mission2 = 14;
      case 14: {
        if (tag == 112) {
         parse_mission2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission2_)));
          set_has_mission2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRoleLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRoleLoginResponse)
  return false;
#undef DO_
}

void CMessageRoleLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRoleLoginResponse)
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 physical = 5;
  if (has_physical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->physical(), output);
  }

  // optional int32 glod = 6;
  if (has_glod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->glod(), output);
  }

  // optional int32 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->diamond(), output);
  }

  // optional int32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->result(), output);
  }

  // optional int32 bits = 9;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bits(), output);
  }

  // optional int32 mission1 = 10;
  if (has_mission1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mission1(), output);
  }

  // optional int32 timeleft = 11;
  if (has_timeleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->timeleft(), output);
  }

  // optional int32 interval = 12;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->interval(), output);
  }

  // optional int32 addition = 13;
  if (has_addition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->addition(), output);
  }

  // optional int32 mission2 = 14;
  if (has_mission2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mission2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRoleLoginResponse)
}

::google::protobuf::uint8* CMessageRoleLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRoleLoginResponse)
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 physical = 5;
  if (has_physical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->physical(), target);
  }

  // optional int32 glod = 6;
  if (has_glod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->glod(), target);
  }

  // optional int32 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->diamond(), target);
  }

  // optional int32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->result(), target);
  }

  // optional int32 bits = 9;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bits(), target);
  }

  // optional int32 mission1 = 10;
  if (has_mission1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mission1(), target);
  }

  // optional int32 timeleft = 11;
  if (has_timeleft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->timeleft(), target);
  }

  // optional int32 interval = 12;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->interval(), target);
  }

  // optional int32 addition = 13;
  if (has_addition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->addition(), target);
  }

  // optional int32 mission2 = 14;
  if (has_mission2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mission2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRoleLoginResponse)
  return target;
}

int CMessageRoleLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 physical = 5;
    if (has_physical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physical());
    }

    // optional int32 glod = 6;
    if (has_glod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->glod());
    }

    // optional int32 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bits = 9;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits());
    }

    // optional int32 mission1 = 10;
    if (has_mission1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission1());
    }

    // optional int32 timeleft = 11;
    if (has_timeleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeleft());
    }

    // optional int32 interval = 12;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional int32 addition = 13;
    if (has_addition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addition());
    }

    // optional int32 mission2 = 14;
    if (has_mission2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRoleLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleLoginResponse::MergeFrom(const CMessageRoleLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_physical()) {
      set_physical(from.physical());
    }
    if (from.has_glod()) {
      set_glod(from.glod());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_mission1()) {
      set_mission1(from.mission1());
    }
    if (from.has_timeleft()) {
      set_timeleft(from.timeleft());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_addition()) {
      set_addition(from.addition());
    }
    if (from.has_mission2()) {
      set_mission2(from.mission2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleLoginResponse::CopyFrom(const CMessageRoleLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRoleLoginResponse::IsInitialized() const {

  return true;
}

void CMessageRoleLoginResponse::Swap(CMessageRoleLoginResponse* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(physical_, other->physical_);
    std::swap(glod_, other->glod_);
    std::swap(diamond_, other->diamond_);
    std::swap(result_, other->result_);
    std::swap(bits_, other->bits_);
    std::swap(mission1_, other->mission1_);
    std::swap(timeleft_, other->timeleft_);
    std::swap(interval_, other->interval_);
    std::swap(addition_, other->addition_);
    std::swap(mission2_, other->mission2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRoleLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRoleLoginResponse_descriptor_;
  metadata.reflection = CMessageRoleLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleCreateRequest::kStyleFieldNumber;
const int CMessageRoleCreateRequest::kUseridFieldNumber;
const int CMessageRoleCreateRequest::kNicknameFieldNumber;
#endif  // !_MSC_VER

CMessageRoleCreateRequest::CMessageRoleCreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRoleCreateRequest)
}

void CMessageRoleCreateRequest::InitAsDefaultInstance() {
}

CMessageRoleCreateRequest::CMessageRoleCreateRequest(const CMessageRoleCreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRoleCreateRequest)
}

void CMessageRoleCreateRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  style_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleCreateRequest::~CMessageRoleCreateRequest() {
  // @@protoc_insertion_point(destructor:CMessageRoleCreateRequest)
  SharedDtor();
}

void CMessageRoleCreateRequest::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CMessageRoleCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRoleCreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleCreateRequest_descriptor_;
}

const CMessageRoleCreateRequest& CMessageRoleCreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRoleCreateRequest* CMessageRoleCreateRequest::default_instance_ = NULL;

CMessageRoleCreateRequest* CMessageRoleCreateRequest::New() const {
  return new CMessageRoleCreateRequest;
}

void CMessageRoleCreateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageRoleCreateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(style_, userid_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRoleCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 style = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRoleCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRoleCreateRequest)
  return false;
#undef DO_
}

void CMessageRoleCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRoleCreateRequest)
  // optional int32 style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->style(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRoleCreateRequest)
}

::google::protobuf::uint8* CMessageRoleCreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRoleCreateRequest)
  // optional int32 style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->style(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRoleCreateRequest)
  return target;
}

int CMessageRoleCreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRoleCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleCreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleCreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleCreateRequest::MergeFrom(const CMessageRoleCreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleCreateRequest::CopyFrom(const CMessageRoleCreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRoleCreateRequest::IsInitialized() const {

  return true;
}

void CMessageRoleCreateRequest::Swap(CMessageRoleCreateRequest* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRoleCreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRoleCreateRequest_descriptor_;
  metadata.reflection = CMessageRoleCreateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRoleCreateResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMessageRoleCreateResponse::CMessageRoleCreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRoleCreateResponse)
}

void CMessageRoleCreateResponse::InitAsDefaultInstance() {
}

CMessageRoleCreateResponse::CMessageRoleCreateResponse(const CMessageRoleCreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRoleCreateResponse)
}

void CMessageRoleCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRoleCreateResponse::~CMessageRoleCreateResponse() {
  // @@protoc_insertion_point(destructor:CMessageRoleCreateResponse)
  SharedDtor();
}

void CMessageRoleCreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMessageRoleCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRoleCreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRoleCreateResponse_descriptor_;
}

const CMessageRoleCreateResponse& CMessageRoleCreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRoleCreateResponse* CMessageRoleCreateResponse::default_instance_ = NULL;

CMessageRoleCreateResponse* CMessageRoleCreateResponse::New() const {
  return new CMessageRoleCreateResponse;
}

void CMessageRoleCreateResponse::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRoleCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRoleCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRoleCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRoleCreateResponse)
  return false;
#undef DO_
}

void CMessageRoleCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRoleCreateResponse)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRoleCreateResponse)
}

::google::protobuf::uint8* CMessageRoleCreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRoleCreateResponse)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRoleCreateResponse)
  return target;
}

int CMessageRoleCreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRoleCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRoleCreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRoleCreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRoleCreateResponse::MergeFrom(const CMessageRoleCreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRoleCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRoleCreateResponse::CopyFrom(const CMessageRoleCreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRoleCreateResponse::IsInitialized() const {

  return true;
}

void CMessageRoleCreateResponse::Swap(CMessageRoleCreateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRoleCreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRoleCreateResponse_descriptor_;
  metadata.reflection = CMessageRoleCreateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRolePropertyRequest::kStyleFieldNumber;
const int CMessageRolePropertyRequest::kUseridFieldNumber;
#endif  // !_MSC_VER

CMessageRolePropertyRequest::CMessageRolePropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRolePropertyRequest)
}

void CMessageRolePropertyRequest::InitAsDefaultInstance() {
}

CMessageRolePropertyRequest::CMessageRolePropertyRequest(const CMessageRolePropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRolePropertyRequest)
}

void CMessageRolePropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  style_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRolePropertyRequest::~CMessageRolePropertyRequest() {
  // @@protoc_insertion_point(destructor:CMessageRolePropertyRequest)
  SharedDtor();
}

void CMessageRolePropertyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMessageRolePropertyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRolePropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRolePropertyRequest_descriptor_;
}

const CMessageRolePropertyRequest& CMessageRolePropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRolePropertyRequest* CMessageRolePropertyRequest::default_instance_ = NULL;

CMessageRolePropertyRequest* CMessageRolePropertyRequest::New() const {
  return new CMessageRolePropertyRequest;
}

void CMessageRolePropertyRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageRolePropertyRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(style_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRolePropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRolePropertyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 style = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRolePropertyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRolePropertyRequest)
  return false;
#undef DO_
}

void CMessageRolePropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRolePropertyRequest)
  // optional int32 style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->style(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRolePropertyRequest)
}

::google::protobuf::uint8* CMessageRolePropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRolePropertyRequest)
  // optional int32 style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->style(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRolePropertyRequest)
  return target;
}

int CMessageRolePropertyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRolePropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRolePropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRolePropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRolePropertyRequest::MergeFrom(const CMessageRolePropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRolePropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRolePropertyRequest::CopyFrom(const CMessageRolePropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRolePropertyRequest::IsInitialized() const {

  return true;
}

void CMessageRolePropertyRequest::Swap(CMessageRolePropertyRequest* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRolePropertyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRolePropertyRequest_descriptor_;
  metadata.reflection = CMessageRolePropertyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageRolePropertyResponse::kFightFieldNumber;
const int CMessageRolePropertyResponse::kAttackFieldNumber;
const int CMessageRolePropertyResponse::kDefenceFieldNumber;
const int CMessageRolePropertyResponse::kHpFieldNumber;
const int CMessageRolePropertyResponse::kSpeedFieldNumber;
const int CMessageRolePropertyResponse::kCritFieldNumber;
const int CMessageRolePropertyResponse::kImmunityFieldNumber;
const int CMessageRolePropertyResponse::kMagicFieldNumber;
const int CMessageRolePropertyResponse::kStrongFieldNumber;
const int CMessageRolePropertyResponse::kAgileFieldNumber;
const int CMessageRolePropertyResponse::kEnduranceFieldNumber;
#endif  // !_MSC_VER

CMessageRolePropertyResponse::CMessageRolePropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageRolePropertyResponse)
}

void CMessageRolePropertyResponse::InitAsDefaultInstance() {
}

CMessageRolePropertyResponse::CMessageRolePropertyResponse(const CMessageRolePropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageRolePropertyResponse)
}

void CMessageRolePropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  fight_ = 0;
  attack_ = 0;
  defence_ = 0;
  hp_ = 0;
  speed_ = 0;
  crit_ = 0;
  immunity_ = 0;
  magic_ = 0;
  strong_ = 0;
  agile_ = 0;
  endurance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageRolePropertyResponse::~CMessageRolePropertyResponse() {
  // @@protoc_insertion_point(destructor:CMessageRolePropertyResponse)
  SharedDtor();
}

void CMessageRolePropertyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMessageRolePropertyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageRolePropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageRolePropertyResponse_descriptor_;
}

const CMessageRolePropertyResponse& CMessageRolePropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rolemessage_2eproto();
  return *default_instance_;
}

CMessageRolePropertyResponse* CMessageRolePropertyResponse::default_instance_ = NULL;

CMessageRolePropertyResponse* CMessageRolePropertyResponse::New() const {
  return new CMessageRolePropertyResponse;
}

void CMessageRolePropertyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageRolePropertyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(fight_, magic_);
  }
  ZR_(strong_, endurance_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageRolePropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageRolePropertyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fight = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attack;
        break;
      }

      // optional int32 attack = 2;
      case 2: {
        if (tag == 16) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_defence;
        break;
      }

      // optional int32 defence = 3;
      case 3: {
        if (tag == 24) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (tag == 32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // optional int32 speed = 5;
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_crit;
        break;
      }

      // optional int32 crit = 6;
      case 6: {
        if (tag == 48) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_immunity;
        break;
      }

      // optional int32 immunity = 7;
      case 7: {
        if (tag == 56) {
         parse_immunity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &immunity_)));
          set_has_immunity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_magic;
        break;
      }

      // optional int32 magic = 8;
      case 8: {
        if (tag == 64) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_strong;
        break;
      }

      // optional int32 strong = 9;
      case 9: {
        if (tag == 72) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_agile;
        break;
      }

      // optional int32 agile = 10;
      case 10: {
        if (tag == 80) {
         parse_agile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agile_)));
          set_has_agile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_endurance;
        break;
      }

      // optional int32 endurance = 11;
      case 11: {
        if (tag == 88) {
         parse_endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageRolePropertyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageRolePropertyResponse)
  return false;
#undef DO_
}

void CMessageRolePropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageRolePropertyResponse)
  // optional int32 fight = 1;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fight(), output);
  }

  // optional int32 attack = 2;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attack(), output);
  }

  // optional int32 defence = 3;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // optional int32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }

  // optional int32 crit = 6;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crit(), output);
  }

  // optional int32 immunity = 7;
  if (has_immunity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->immunity(), output);
  }

  // optional int32 magic = 8;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->magic(), output);
  }

  // optional int32 strong = 9;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->strong(), output);
  }

  // optional int32 agile = 10;
  if (has_agile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->agile(), output);
  }

  // optional int32 endurance = 11;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->endurance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageRolePropertyResponse)
}

::google::protobuf::uint8* CMessageRolePropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageRolePropertyResponse)
  // optional int32 fight = 1;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fight(), target);
  }

  // optional int32 attack = 2;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attack(), target);
  }

  // optional int32 defence = 3;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence(), target);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // optional int32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }

  // optional int32 crit = 6;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crit(), target);
  }

  // optional int32 immunity = 7;
  if (has_immunity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->immunity(), target);
  }

  // optional int32 magic = 8;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->magic(), target);
  }

  // optional int32 strong = 9;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->strong(), target);
  }

  // optional int32 agile = 10;
  if (has_agile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->agile(), target);
  }

  // optional int32 endurance = 11;
  if (has_endurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->endurance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageRolePropertyResponse)
  return target;
}

int CMessageRolePropertyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fight = 1;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 attack = 2;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

    // optional int32 defence = 3;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 crit = 6;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 immunity = 7;
    if (has_immunity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->immunity());
    }

    // optional int32 magic = 8;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 strong = 9;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // optional int32 agile = 10;
    if (has_agile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agile());
    }

    // optional int32 endurance = 11;
    if (has_endurance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endurance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageRolePropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageRolePropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageRolePropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageRolePropertyResponse::MergeFrom(const CMessageRolePropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_immunity()) {
      set_immunity(from.immunity());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_agile()) {
      set_agile(from.agile());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageRolePropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageRolePropertyResponse::CopyFrom(const CMessageRolePropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageRolePropertyResponse::IsInitialized() const {

  return true;
}

void CMessageRolePropertyResponse::Swap(CMessageRolePropertyResponse* other) {
  if (other != this) {
    std::swap(fight_, other->fight_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(hp_, other->hp_);
    std::swap(speed_, other->speed_);
    std::swap(crit_, other->crit_);
    std::swap(immunity_, other->immunity_);
    std::swap(magic_, other->magic_);
    std::swap(strong_, other->strong_);
    std::swap(agile_, other->agile_);
    std::swap(endurance_, other->endurance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageRolePropertyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageRolePropertyResponse_descriptor_;
  metadata.reflection = CMessageRolePropertyResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
