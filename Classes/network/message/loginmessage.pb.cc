// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMessageLoginInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginServerResponse_ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginServerResponse_ServerList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginOpcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginmessage_2eproto() {
  protobuf_AddDesc_loginmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CMessageLoginInfoRequest_descriptor_ = file->message_type(0);
  static const int CMessageLoginInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoRequest, serial_),
  };
  CMessageLoginInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginInfoRequest_descriptor_,
      CMessageLoginInfoRequest::default_instance_,
      CMessageLoginInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginInfoRequest));
  CMessageLoginInfoResponse_descriptor_ = file->message_type(1);
  static const int CMessageLoginInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, name_),
  };
  CMessageLoginInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginInfoResponse_descriptor_,
      CMessageLoginInfoResponse::default_instance_,
      CMessageLoginInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginInfoResponse));
  CMessageLoginServerRequest_descriptor_ = file->message_type(2);
  static const int CMessageLoginServerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, version_),
  };
  CMessageLoginServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginServerRequest_descriptor_,
      CMessageLoginServerRequest::default_instance_,
      CMessageLoginServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginServerRequest));
  CMessageLoginServerResponse_descriptor_ = file->message_type(3);
  static const int CMessageLoginServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse, lists_),
  };
  CMessageLoginServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginServerResponse_descriptor_,
      CMessageLoginServerResponse::default_instance_,
      CMessageLoginServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginServerResponse));
  CMessageLoginServerResponse_ServerList_descriptor_ = CMessageLoginServerResponse_descriptor_->nested_type(0);
  static const int CMessageLoginServerResponse_ServerList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, status_),
  };
  CMessageLoginServerResponse_ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMessageLoginServerResponse_ServerList_descriptor_,
      CMessageLoginServerResponse_ServerList::default_instance_,
      CMessageLoginServerResponse_ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginServerResponse_ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMessageLoginServerResponse_ServerList));
  LoginOpcode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginInfoRequest_descriptor_, &CMessageLoginInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginInfoResponse_descriptor_, &CMessageLoginInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginServerRequest_descriptor_, &CMessageLoginServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginServerResponse_descriptor_, &CMessageLoginServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMessageLoginServerResponse_ServerList_descriptor_, &CMessageLoginServerResponse_ServerList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginmessage_2eproto() {
  delete CMessageLoginInfoRequest::default_instance_;
  delete CMessageLoginInfoRequest_reflection_;
  delete CMessageLoginInfoResponse::default_instance_;
  delete CMessageLoginInfoResponse_reflection_;
  delete CMessageLoginServerRequest::default_instance_;
  delete CMessageLoginServerRequest_reflection_;
  delete CMessageLoginServerResponse::default_instance_;
  delete CMessageLoginServerResponse_reflection_;
  delete CMessageLoginServerResponse_ServerList::default_instance_;
  delete CMessageLoginServerResponse_ServerList_reflection_;
}

void protobuf_AddDesc_loginmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022loginmessage.proto\";\n\030CMessageLoginInf"
    "oRequest\022\017\n\007version\030\001 \001(\t\022\016\n\006serial\030\002 \001("
    "\005\"d\n\031CMessageLoginInfoResponse\022\017\n\007versio"
    "n\030\001 \001(\t\022\016\n\006serial\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022\014\n\004p"
    "ort\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\"-\n\032CMessageLogin"
    "ServerRequest\022\017\n\007version\030\001 \001(\t\"\253\001\n\033CMess"
    "ageLoginServerResponse\0226\n\005lists\030\001 \003(\0132\'."
    "CMessageLoginServerResponse.ServerList\032T"
    "\n\nServerList\022\016\n\006serial\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t"
    "\022\014\n\004port\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\016\n\006status\030\005"
    " \001(\005*\245\001\n\013LoginOpcode\022\035\n\031ID_C2S_LOGIN_INF"
    "O_REQUEST\020\000\022\036\n\032ID_S2C_LOGIN_INFO_RESPONS"
    "E\020\001\022\037\n\033ID_C2S_LOGIN_SERVER_REQUEST\020\002\022 \n\034"
    "ID_S2C_LOGIN_SERVER_RESPONSE\020\003\022\024\n\020LOGIN_"
    "MODULE_END\020\004B\002H\001", 576);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginmessage.proto", &protobuf_RegisterTypes);
  CMessageLoginInfoRequest::default_instance_ = new CMessageLoginInfoRequest();
  CMessageLoginInfoResponse::default_instance_ = new CMessageLoginInfoResponse();
  CMessageLoginServerRequest::default_instance_ = new CMessageLoginServerRequest();
  CMessageLoginServerResponse::default_instance_ = new CMessageLoginServerResponse();
  CMessageLoginServerResponse_ServerList::default_instance_ = new CMessageLoginServerResponse_ServerList();
  CMessageLoginInfoRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoginInfoResponse::default_instance_->InitAsDefaultInstance();
  CMessageLoginServerRequest::default_instance_->InitAsDefaultInstance();
  CMessageLoginServerResponse::default_instance_->InitAsDefaultInstance();
  CMessageLoginServerResponse_ServerList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginmessage_2eproto {
  StaticDescriptorInitializer_loginmessage_2eproto() {
    protobuf_AddDesc_loginmessage_2eproto();
  }
} static_descriptor_initializer_loginmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* LoginOpcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginOpcode_descriptor_;
}
bool LoginOpcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginInfoRequest::kVersionFieldNumber;
const int CMessageLoginInfoRequest::kSerialFieldNumber;
#endif  // !_MSC_VER

CMessageLoginInfoRequest::CMessageLoginInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginInfoRequest)
}

void CMessageLoginInfoRequest::InitAsDefaultInstance() {
}

CMessageLoginInfoRequest::CMessageLoginInfoRequest(const CMessageLoginInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginInfoRequest)
}

void CMessageLoginInfoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginInfoRequest::~CMessageLoginInfoRequest() {
  // @@protoc_insertion_point(destructor:CMessageLoginInfoRequest)
  SharedDtor();
}

void CMessageLoginInfoRequest::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CMessageLoginInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginInfoRequest_descriptor_;
}

const CMessageLoginInfoRequest& CMessageLoginInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginmessage_2eproto();
  return *default_instance_;
}

CMessageLoginInfoRequest* CMessageLoginInfoRequest::default_instance_ = NULL;

CMessageLoginInfoRequest* CMessageLoginInfoRequest::New() const {
  return new CMessageLoginInfoRequest;
}

void CMessageLoginInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    serial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // optional int32 serial = 2;
      case 2: {
        if (tag == 16) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginInfoRequest)
  return false;
#undef DO_
}

void CMessageLoginInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginInfoRequest)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional int32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageLoginInfoRequest)
}

::google::protobuf::uint8* CMessageLoginInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginInfoRequest)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional int32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginInfoRequest)
  return target;
}

int CMessageLoginInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginInfoRequest::MergeFrom(const CMessageLoginInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginInfoRequest::CopyFrom(const CMessageLoginInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageLoginInfoRequest::IsInitialized() const {

  return true;
}

void CMessageLoginInfoRequest::Swap(CMessageLoginInfoRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageLoginInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginInfoRequest_descriptor_;
  metadata.reflection = CMessageLoginInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginInfoResponse::kVersionFieldNumber;
const int CMessageLoginInfoResponse::kSerialFieldNumber;
const int CMessageLoginInfoResponse::kIpFieldNumber;
const int CMessageLoginInfoResponse::kPortFieldNumber;
const int CMessageLoginInfoResponse::kNameFieldNumber;
#endif  // !_MSC_VER

CMessageLoginInfoResponse::CMessageLoginInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginInfoResponse)
}

void CMessageLoginInfoResponse::InitAsDefaultInstance() {
}

CMessageLoginInfoResponse::CMessageLoginInfoResponse(const CMessageLoginInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginInfoResponse)
}

void CMessageLoginInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginInfoResponse::~CMessageLoginInfoResponse() {
  // @@protoc_insertion_point(destructor:CMessageLoginInfoResponse)
  SharedDtor();
}

void CMessageLoginInfoResponse::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMessageLoginInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginInfoResponse_descriptor_;
}

const CMessageLoginInfoResponse& CMessageLoginInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginmessage_2eproto();
  return *default_instance_;
}

CMessageLoginInfoResponse* CMessageLoginInfoResponse::default_instance_ = NULL;

CMessageLoginInfoResponse* CMessageLoginInfoResponse::New() const {
  return new CMessageLoginInfoResponse;
}

void CMessageLoginInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageLoginInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(serial_, port_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // optional int32 serial = 2;
      case 2: {
        if (tag == 16) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginInfoResponse)
  return false;
#undef DO_
}

void CMessageLoginInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginInfoResponse)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional int32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serial(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageLoginInfoResponse)
}

::google::protobuf::uint8* CMessageLoginInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginInfoResponse)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional int32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serial(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginInfoResponse)
  return target;
}

int CMessageLoginInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginInfoResponse::MergeFrom(const CMessageLoginInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginInfoResponse::CopyFrom(const CMessageLoginInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageLoginInfoResponse::IsInitialized() const {

  return true;
}

void CMessageLoginInfoResponse::Swap(CMessageLoginInfoResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(serial_, other->serial_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageLoginInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginInfoResponse_descriptor_;
  metadata.reflection = CMessageLoginInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginServerRequest::kVersionFieldNumber;
#endif  // !_MSC_VER

CMessageLoginServerRequest::CMessageLoginServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginServerRequest)
}

void CMessageLoginServerRequest::InitAsDefaultInstance() {
}

CMessageLoginServerRequest::CMessageLoginServerRequest(const CMessageLoginServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginServerRequest)
}

void CMessageLoginServerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginServerRequest::~CMessageLoginServerRequest() {
  // @@protoc_insertion_point(destructor:CMessageLoginServerRequest)
  SharedDtor();
}

void CMessageLoginServerRequest::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CMessageLoginServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerRequest_descriptor_;
}

const CMessageLoginServerRequest& CMessageLoginServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginmessage_2eproto();
  return *default_instance_;
}

CMessageLoginServerRequest* CMessageLoginServerRequest::default_instance_ = NULL;

CMessageLoginServerRequest* CMessageLoginServerRequest::New() const {
  return new CMessageLoginServerRequest;
}

void CMessageLoginServerRequest::Clear() {
  if (has_version()) {
    if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginServerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginServerRequest)
  return false;
#undef DO_
}

void CMessageLoginServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginServerRequest)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageLoginServerRequest)
}

::google::protobuf::uint8* CMessageLoginServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginServerRequest)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginServerRequest)
  return target;
}

int CMessageLoginServerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginServerRequest::MergeFrom(const CMessageLoginServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerRequest::CopyFrom(const CMessageLoginServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageLoginServerRequest::IsInitialized() const {

  return true;
}

void CMessageLoginServerRequest::Swap(CMessageLoginServerRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageLoginServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginServerRequest_descriptor_;
  metadata.reflection = CMessageLoginServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMessageLoginServerResponse_ServerList::kSerialFieldNumber;
const int CMessageLoginServerResponse_ServerList::kIpFieldNumber;
const int CMessageLoginServerResponse_ServerList::kPortFieldNumber;
const int CMessageLoginServerResponse_ServerList::kNameFieldNumber;
const int CMessageLoginServerResponse_ServerList::kStatusFieldNumber;
#endif  // !_MSC_VER

CMessageLoginServerResponse_ServerList::CMessageLoginServerResponse_ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginServerResponse.ServerList)
}

void CMessageLoginServerResponse_ServerList::InitAsDefaultInstance() {
}

CMessageLoginServerResponse_ServerList::CMessageLoginServerResponse_ServerList(const CMessageLoginServerResponse_ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginServerResponse.ServerList)
}

void CMessageLoginServerResponse_ServerList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginServerResponse_ServerList::~CMessageLoginServerResponse_ServerList() {
  // @@protoc_insertion_point(destructor:CMessageLoginServerResponse.ServerList)
  SharedDtor();
}

void CMessageLoginServerResponse_ServerList::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMessageLoginServerResponse_ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginServerResponse_ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerResponse_ServerList_descriptor_;
}

const CMessageLoginServerResponse_ServerList& CMessageLoginServerResponse_ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginmessage_2eproto();
  return *default_instance_;
}

CMessageLoginServerResponse_ServerList* CMessageLoginServerResponse_ServerList::default_instance_ = NULL;

CMessageLoginServerResponse_ServerList* CMessageLoginServerResponse_ServerList::New() const {
  return new CMessageLoginServerResponse_ServerList;
}

void CMessageLoginServerResponse_ServerList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMessageLoginServerResponse_ServerList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(serial_, port_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginServerResponse_ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginServerResponse.ServerList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serial = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginServerResponse.ServerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginServerResponse.ServerList)
  return false;
#undef DO_
}

void CMessageLoginServerResponse_ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginServerResponse.ServerList)
  // optional int32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageLoginServerResponse.ServerList)
}

::google::protobuf::uint8* CMessageLoginServerResponse_ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginServerResponse.ServerList)
  // optional int32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginServerResponse.ServerList)
  return target;
}

int CMessageLoginServerResponse_ServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginServerResponse_ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginServerResponse_ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginServerResponse_ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginServerResponse_ServerList::MergeFrom(const CMessageLoginServerResponse_ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginServerResponse_ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerResponse_ServerList::CopyFrom(const CMessageLoginServerResponse_ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageLoginServerResponse_ServerList::IsInitialized() const {

  return true;
}

void CMessageLoginServerResponse_ServerList::Swap(CMessageLoginServerResponse_ServerList* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageLoginServerResponse_ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginServerResponse_ServerList_descriptor_;
  metadata.reflection = CMessageLoginServerResponse_ServerList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMessageLoginServerResponse::kListsFieldNumber;
#endif  // !_MSC_VER

CMessageLoginServerResponse::CMessageLoginServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginServerResponse)
}

void CMessageLoginServerResponse::InitAsDefaultInstance() {
}

CMessageLoginServerResponse::CMessageLoginServerResponse(const CMessageLoginServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginServerResponse)
}

void CMessageLoginServerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMessageLoginServerResponse::~CMessageLoginServerResponse() {
  // @@protoc_insertion_point(destructor:CMessageLoginServerResponse)
  SharedDtor();
}

void CMessageLoginServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMessageLoginServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginServerResponse_descriptor_;
}

const CMessageLoginServerResponse& CMessageLoginServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginmessage_2eproto();
  return *default_instance_;
}

CMessageLoginServerResponse* CMessageLoginServerResponse::default_instance_ = NULL;

CMessageLoginServerResponse* CMessageLoginServerResponse::New() const {
  return new CMessageLoginServerResponse;
}

void CMessageLoginServerResponse::Clear() {
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMessageLoginServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMessageLoginServerResponse.ServerList lists = 1;
      case 1: {
        if (tag == 10) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginServerResponse)
  return false;
#undef DO_
}

void CMessageLoginServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginServerResponse)
  // repeated .CMessageLoginServerResponse.ServerList lists = 1;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMessageLoginServerResponse)
}

::google::protobuf::uint8* CMessageLoginServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginServerResponse)
  // repeated .CMessageLoginServerResponse.ServerList lists = 1;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginServerResponse)
  return target;
}

int CMessageLoginServerResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMessageLoginServerResponse.ServerList lists = 1;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMessageLoginServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMessageLoginServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMessageLoginServerResponse::MergeFrom(const CMessageLoginServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lists_.MergeFrom(from.lists_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMessageLoginServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginServerResponse::CopyFrom(const CMessageLoginServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMessageLoginServerResponse::IsInitialized() const {

  return true;
}

void CMessageLoginServerResponse::Swap(CMessageLoginServerResponse* other) {
  if (other != this) {
    lists_.Swap(&other->lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMessageLoginServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginServerResponse_descriptor_;
  metadata.reflection = CMessageLoginServerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
