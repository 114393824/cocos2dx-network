// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginmessage.proto

#ifndef PROTOBUF_loginmessage_2eproto__INCLUDED
#define PROTOBUF_loginmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loginmessage_2eproto();
void protobuf_AssignDesc_loginmessage_2eproto();
void protobuf_ShutdownFile_loginmessage_2eproto();

class CMessageLoginInfoRequest;
class CMessageLoginInfoResponse;
class CMessageLoginServerRequest;
class CMessageLoginServerResponse;
class CMessageLoginServerResponse_ServerList;

enum LoginOpcode {
  ID_C2S_LOGIN_INFO_REQUEST = 0,
  ID_S2C_LOGIN_INFO_RESPONSE = 1,
  ID_C2S_LOGIN_SERVER_REQUEST = 2,
  ID_S2C_LOGIN_SERVER_RESPONSE = 3,
  LOGIN_MODULE_END = 4
};
bool LoginOpcode_IsValid(int value);
const LoginOpcode LoginOpcode_MIN = ID_C2S_LOGIN_INFO_REQUEST;
const LoginOpcode LoginOpcode_MAX = LOGIN_MODULE_END;
const int LoginOpcode_ARRAYSIZE = LoginOpcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginOpcode_descriptor();
inline const ::std::string& LoginOpcode_Name(LoginOpcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginOpcode_descriptor(), value);
}
inline bool LoginOpcode_Parse(
    const ::std::string& name, LoginOpcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginOpcode>(
    LoginOpcode_descriptor(), name, value);
}
// ===================================================================

class CMessageLoginInfoRequest : public ::google::protobuf::Message {
 public:
  CMessageLoginInfoRequest();
  virtual ~CMessageLoginInfoRequest();

  CMessageLoginInfoRequest(const CMessageLoginInfoRequest& from);

  inline CMessageLoginInfoRequest& operator=(const CMessageLoginInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLoginInfoRequest& default_instance();

  void Swap(CMessageLoginInfoRequest* other);

  // implements Message ----------------------------------------------

  CMessageLoginInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLoginInfoRequest& from);
  void MergeFrom(const CMessageLoginInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional int32 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::int32 serial() const;
  inline void set_serial(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMessageLoginInfoRequest)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_serial();
  inline void clear_has_serial();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::google::protobuf::int32 serial_;
  friend void  protobuf_AddDesc_loginmessage_2eproto();
  friend void protobuf_AssignDesc_loginmessage_2eproto();
  friend void protobuf_ShutdownFile_loginmessage_2eproto();

  void InitAsDefaultInstance();
  static CMessageLoginInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLoginInfoResponse : public ::google::protobuf::Message {
 public:
  CMessageLoginInfoResponse();
  virtual ~CMessageLoginInfoResponse();

  CMessageLoginInfoResponse(const CMessageLoginInfoResponse& from);

  inline CMessageLoginInfoResponse& operator=(const CMessageLoginInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLoginInfoResponse& default_instance();

  void Swap(CMessageLoginInfoResponse* other);

  // implements Message ----------------------------------------------

  CMessageLoginInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLoginInfoResponse& from);
  void MergeFrom(const CMessageLoginInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional int32 serial = 2;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 2;
  inline ::google::protobuf::int32 serial() const;
  inline void set_serial(::google::protobuf::int32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CMessageLoginInfoResponse)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::std::string* ip_;
  ::google::protobuf::int32 serial_;
  ::google::protobuf::int32 port_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_loginmessage_2eproto();
  friend void protobuf_AssignDesc_loginmessage_2eproto();
  friend void protobuf_ShutdownFile_loginmessage_2eproto();

  void InitAsDefaultInstance();
  static CMessageLoginInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLoginServerRequest : public ::google::protobuf::Message {
 public:
  CMessageLoginServerRequest();
  virtual ~CMessageLoginServerRequest();

  CMessageLoginServerRequest(const CMessageLoginServerRequest& from);

  inline CMessageLoginServerRequest& operator=(const CMessageLoginServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLoginServerRequest& default_instance();

  void Swap(CMessageLoginServerRequest* other);

  // implements Message ----------------------------------------------

  CMessageLoginServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLoginServerRequest& from);
  void MergeFrom(const CMessageLoginServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:CMessageLoginServerRequest)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  friend void  protobuf_AddDesc_loginmessage_2eproto();
  friend void protobuf_AssignDesc_loginmessage_2eproto();
  friend void protobuf_ShutdownFile_loginmessage_2eproto();

  void InitAsDefaultInstance();
  static CMessageLoginServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLoginServerResponse_ServerList : public ::google::protobuf::Message {
 public:
  CMessageLoginServerResponse_ServerList();
  virtual ~CMessageLoginServerResponse_ServerList();

  CMessageLoginServerResponse_ServerList(const CMessageLoginServerResponse_ServerList& from);

  inline CMessageLoginServerResponse_ServerList& operator=(const CMessageLoginServerResponse_ServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLoginServerResponse_ServerList& default_instance();

  void Swap(CMessageLoginServerResponse_ServerList* other);

  // implements Message ----------------------------------------------

  CMessageLoginServerResponse_ServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLoginServerResponse_ServerList& from);
  void MergeFrom(const CMessageLoginServerResponse_ServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serial = 1;
  inline bool has_serial() const;
  inline void clear_serial();
  static const int kSerialFieldNumber = 1;
  inline ::google::protobuf::int32 serial() const;
  inline void set_serial(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMessageLoginServerResponse.ServerList)
 private:
  inline void set_has_serial();
  inline void clear_has_serial();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 serial_;
  ::google::protobuf::int32 port_;
  ::std::string* name_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_loginmessage_2eproto();
  friend void protobuf_AssignDesc_loginmessage_2eproto();
  friend void protobuf_ShutdownFile_loginmessage_2eproto();

  void InitAsDefaultInstance();
  static CMessageLoginServerResponse_ServerList* default_instance_;
};
// -------------------------------------------------------------------

class CMessageLoginServerResponse : public ::google::protobuf::Message {
 public:
  CMessageLoginServerResponse();
  virtual ~CMessageLoginServerResponse();

  CMessageLoginServerResponse(const CMessageLoginServerResponse& from);

  inline CMessageLoginServerResponse& operator=(const CMessageLoginServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMessageLoginServerResponse& default_instance();

  void Swap(CMessageLoginServerResponse* other);

  // implements Message ----------------------------------------------

  CMessageLoginServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMessageLoginServerResponse& from);
  void MergeFrom(const CMessageLoginServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMessageLoginServerResponse_ServerList ServerList;

  // accessors -------------------------------------------------------

  // repeated .CMessageLoginServerResponse.ServerList lists = 1;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 1;
  inline const ::CMessageLoginServerResponse_ServerList& lists(int index) const;
  inline ::CMessageLoginServerResponse_ServerList* mutable_lists(int index);
  inline ::CMessageLoginServerResponse_ServerList* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::CMessageLoginServerResponse_ServerList >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMessageLoginServerResponse_ServerList >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:CMessageLoginServerResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMessageLoginServerResponse_ServerList > lists_;
  friend void  protobuf_AddDesc_loginmessage_2eproto();
  friend void protobuf_AssignDesc_loginmessage_2eproto();
  friend void protobuf_ShutdownFile_loginmessage_2eproto();

  void InitAsDefaultInstance();
  static CMessageLoginServerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CMessageLoginInfoRequest

// optional string version = 1;
inline bool CMessageLoginInfoRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessageLoginInfoRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessageLoginInfoRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessageLoginInfoRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CMessageLoginInfoRequest::version() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoRequest.version)
  return *version_;
}
inline void CMessageLoginInfoRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginInfoRequest.version)
}
inline void CMessageLoginInfoRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginInfoRequest.version)
}
inline void CMessageLoginInfoRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginInfoRequest.version)
}
inline ::std::string* CMessageLoginInfoRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginInfoRequest.version)
  return version_;
}
inline ::std::string* CMessageLoginInfoRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginInfoRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginInfoRequest.version)
}

// optional int32 serial = 2;
inline bool CMessageLoginInfoRequest::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessageLoginInfoRequest::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessageLoginInfoRequest::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessageLoginInfoRequest::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
inline ::google::protobuf::int32 CMessageLoginInfoRequest::serial() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoRequest.serial)
  return serial_;
}
inline void CMessageLoginInfoRequest::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginInfoRequest.serial)
}

// -------------------------------------------------------------------

// CMessageLoginInfoResponse

// optional string version = 1;
inline bool CMessageLoginInfoResponse::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessageLoginInfoResponse::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessageLoginInfoResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessageLoginInfoResponse::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CMessageLoginInfoResponse::version() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoResponse.version)
  return *version_;
}
inline void CMessageLoginInfoResponse::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginInfoResponse.version)
}
inline void CMessageLoginInfoResponse::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginInfoResponse.version)
}
inline void CMessageLoginInfoResponse::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginInfoResponse.version)
}
inline ::std::string* CMessageLoginInfoResponse::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginInfoResponse.version)
  return version_;
}
inline ::std::string* CMessageLoginInfoResponse::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginInfoResponse::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginInfoResponse.version)
}

// optional int32 serial = 2;
inline bool CMessageLoginInfoResponse::has_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessageLoginInfoResponse::set_has_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessageLoginInfoResponse::clear_has_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessageLoginInfoResponse::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
inline ::google::protobuf::int32 CMessageLoginInfoResponse::serial() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoResponse.serial)
  return serial_;
}
inline void CMessageLoginInfoResponse::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginInfoResponse.serial)
}

// optional string ip = 3;
inline bool CMessageLoginInfoResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMessageLoginInfoResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMessageLoginInfoResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMessageLoginInfoResponse::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CMessageLoginInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoResponse.ip)
  return *ip_;
}
inline void CMessageLoginInfoResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginInfoResponse.ip)
}
inline void CMessageLoginInfoResponse::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginInfoResponse.ip)
}
inline void CMessageLoginInfoResponse::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginInfoResponse.ip)
}
inline ::std::string* CMessageLoginInfoResponse::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginInfoResponse.ip)
  return ip_;
}
inline ::std::string* CMessageLoginInfoResponse::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginInfoResponse.ip)
}

// optional int32 port = 4;
inline bool CMessageLoginInfoResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMessageLoginInfoResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMessageLoginInfoResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMessageLoginInfoResponse::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CMessageLoginInfoResponse::port() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoResponse.port)
  return port_;
}
inline void CMessageLoginInfoResponse::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginInfoResponse.port)
}

// optional string name = 5;
inline bool CMessageLoginInfoResponse::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMessageLoginInfoResponse::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMessageLoginInfoResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMessageLoginInfoResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMessageLoginInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:CMessageLoginInfoResponse.name)
  return *name_;
}
inline void CMessageLoginInfoResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginInfoResponse.name)
}
inline void CMessageLoginInfoResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginInfoResponse.name)
}
inline void CMessageLoginInfoResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginInfoResponse.name)
}
inline ::std::string* CMessageLoginInfoResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginInfoResponse.name)
  return name_;
}
inline ::std::string* CMessageLoginInfoResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginInfoResponse::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginInfoResponse.name)
}

// -------------------------------------------------------------------

// CMessageLoginServerRequest

// optional string version = 1;
inline bool CMessageLoginServerRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessageLoginServerRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessageLoginServerRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessageLoginServerRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CMessageLoginServerRequest::version() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerRequest.version)
  return *version_;
}
inline void CMessageLoginServerRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginServerRequest.version)
}
inline void CMessageLoginServerRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginServerRequest.version)
}
inline void CMessageLoginServerRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginServerRequest.version)
}
inline ::std::string* CMessageLoginServerRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginServerRequest.version)
  return version_;
}
inline ::std::string* CMessageLoginServerRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginServerRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginServerRequest.version)
}

// -------------------------------------------------------------------

// CMessageLoginServerResponse_ServerList

// optional int32 serial = 1;
inline bool CMessageLoginServerResponse_ServerList::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMessageLoginServerResponse_ServerList::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMessageLoginServerResponse_ServerList::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMessageLoginServerResponse_ServerList::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
inline ::google::protobuf::int32 CMessageLoginServerResponse_ServerList::serial() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.ServerList.serial)
  return serial_;
}
inline void CMessageLoginServerResponse_ServerList::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginServerResponse.ServerList.serial)
}

// optional string ip = 2;
inline bool CMessageLoginServerResponse_ServerList::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMessageLoginServerResponse_ServerList::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMessageLoginServerResponse_ServerList::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMessageLoginServerResponse_ServerList::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CMessageLoginServerResponse_ServerList::ip() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.ServerList.ip)
  return *ip_;
}
inline void CMessageLoginServerResponse_ServerList::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginServerResponse.ServerList.ip)
}
inline void CMessageLoginServerResponse_ServerList::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginServerResponse.ServerList.ip)
}
inline void CMessageLoginServerResponse_ServerList::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginServerResponse.ServerList.ip)
}
inline ::std::string* CMessageLoginServerResponse_ServerList::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginServerResponse.ServerList.ip)
  return ip_;
}
inline ::std::string* CMessageLoginServerResponse_ServerList::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginServerResponse_ServerList::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginServerResponse.ServerList.ip)
}

// optional int32 port = 3;
inline bool CMessageLoginServerResponse_ServerList::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMessageLoginServerResponse_ServerList::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMessageLoginServerResponse_ServerList::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMessageLoginServerResponse_ServerList::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CMessageLoginServerResponse_ServerList::port() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.ServerList.port)
  return port_;
}
inline void CMessageLoginServerResponse_ServerList::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginServerResponse.ServerList.port)
}

// optional string name = 4;
inline bool CMessageLoginServerResponse_ServerList::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMessageLoginServerResponse_ServerList::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMessageLoginServerResponse_ServerList::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMessageLoginServerResponse_ServerList::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMessageLoginServerResponse_ServerList::name() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.ServerList.name)
  return *name_;
}
inline void CMessageLoginServerResponse_ServerList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMessageLoginServerResponse.ServerList.name)
}
inline void CMessageLoginServerResponse_ServerList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMessageLoginServerResponse.ServerList.name)
}
inline void CMessageLoginServerResponse_ServerList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginServerResponse.ServerList.name)
}
inline ::std::string* CMessageLoginServerResponse_ServerList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMessageLoginServerResponse.ServerList.name)
  return name_;
}
inline ::std::string* CMessageLoginServerResponse_ServerList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMessageLoginServerResponse_ServerList::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginServerResponse.ServerList.name)
}

// optional int32 status = 5;
inline bool CMessageLoginServerResponse_ServerList::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMessageLoginServerResponse_ServerList::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMessageLoginServerResponse_ServerList::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMessageLoginServerResponse_ServerList::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 CMessageLoginServerResponse_ServerList::status() const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.ServerList.status)
  return status_;
}
inline void CMessageLoginServerResponse_ServerList::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginServerResponse.ServerList.status)
}

// -------------------------------------------------------------------

// CMessageLoginServerResponse

// repeated .CMessageLoginServerResponse.ServerList lists = 1;
inline int CMessageLoginServerResponse::lists_size() const {
  return lists_.size();
}
inline void CMessageLoginServerResponse::clear_lists() {
  lists_.Clear();
}
inline const ::CMessageLoginServerResponse_ServerList& CMessageLoginServerResponse::lists(int index) const {
  // @@protoc_insertion_point(field_get:CMessageLoginServerResponse.lists)
  return lists_.Get(index);
}
inline ::CMessageLoginServerResponse_ServerList* CMessageLoginServerResponse::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:CMessageLoginServerResponse.lists)
  return lists_.Mutable(index);
}
inline ::CMessageLoginServerResponse_ServerList* CMessageLoginServerResponse::add_lists() {
  // @@protoc_insertion_point(field_add:CMessageLoginServerResponse.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMessageLoginServerResponse_ServerList >&
CMessageLoginServerResponse::lists() const {
  // @@protoc_insertion_point(field_list:CMessageLoginServerResponse.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMessageLoginServerResponse_ServerList >*
CMessageLoginServerResponse::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:CMessageLoginServerResponse.lists)
  return &lists_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginOpcode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginOpcode>() {
  return ::LoginOpcode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loginmessage_2eproto__INCLUDED
